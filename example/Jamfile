#
# Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
# Copyright (c) 2021 Dmitry Arkhipov (grisumbras@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/cppalliance/json
#

project json/doc ;

import os ;
import path ;
import boostbook ;
import quickbook ;
import doxygen ;
import ../../../tools/docca/docca.jam ;

path-constant out : . ;

#-------------------------------------------------------------------------------
#
# Build the list of header files that Doxygen will scan. We need
# this list to inform the build system of the dependencies so the
# docs can be rebuild if any of the header files change.
#

local sources = [ path.glob-tree ../include/boost/json : *.hpp *.ipp : detail impl ] ;

# Get the configured paths to doxygen

.doxygen = [ doxygen.name ] ;
.doxygen ?= doxygen ;

#-------------------------------------------------------------------------------
#
# Invoke Doxygen to process the header files and produce the XML
# containing the description of the C++ declarations and extracted
# Javadoc comments.
#
make index.xml
:
./source.dox
:
@make_doxygen_xml
:
<dependency>$(sources)
;

rule make_doxygen_xml ( targets * : sources * : properties * )
{
  EXAMPLE_DIR on $(targets) =
    [ path.native [  path.root
    [ on $(sources[1]) return $(SEARCH) ] [ path.pwd ] ] ]  ;
}

if [ os.name ] = NT
{
    actions make_doxygen_xml
    {
        SET EXAMPLE_DIR=$(EXAMPLE_DIR)
        SET XML_OUTPUT=$(1:D)
        "$(.doxygen)" $(2)
    }
}
else
{
    actions make_doxygen_xml
    {
        export EXAMPLE_DIR=$(EXAMPLE_DIR)
        export XML_OUTPUT=$(1:D)
        "$(.doxygen)" $(2)
    }
}

docca.reference reference.qbk : index.xml xsl/custom-overrides.xsl ;

#-------------------------------------------------------------------------------
#
# Produce the reference.qbk file by running
# the reference xml through the transform.
#
#make reference.qbk
#    :
#        reference.xml
#        transform.xsl
#    :
#        saxonhe.saxonhe
#    ;

# We have to make a copy of reference.qbk and put it
# in a place where the static .qbk files can find it
#
install qbk : reference.qbk ;

#-------------------------------------------------------------------------------
#
# Produce the Boost.Book XML from the QuickBook
#

install images
    :
        [ glob images/*.png ]
    :
        <location>html/json/images
    ;

explicit images ;

xml json_doc
    :
        main.qbk
    :
        <dependency>images
        <dependency>qbk
    ;

explicit json_doc ;

#-------------------------------------------------------------------------------
#
# HTML documentation for $(BOOST_ROOT)/doc/html
#
#-------------------------------------------------------------------------------

boostbook json
    :
        json_doc
    :
        <xsl:param>boost.root=../../../..
        <xsl:param>chapter.autolabel=1
        <xsl:param>chunk.section.depth=8                # Depth to which sections should be chunked
        <xsl:param>chunk.first.sections=1               # Chunk the first top-level section?
        <xsl:param>toc.section.depth=2                  # How deep should recursive sections appear in the TOC?
        <xsl:param>toc.max.depth=8                      # How many levels should be created for each TOC?
        <xsl:param>generate.section.toc.level=8         # Control depth of TOC generation in sections
        <xsl:param>generate.toc="chapter toc,title section nop reference nop"
        <include>../../../tools/boostbook/dtd
    :
        <dependency>images
    ;

#-------------------------------------------------------------------------------
#
# These are used to inform the build system of the
# means to build the integrated and stand-alone docs.
#

alias boostdoc ;
explicit boostdoc ;

alias boostrelease : json ;
explicit boostrelease ;
