#
# Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
# Copyright (c) 2021 Dmitry Arkhipov (grisumbras@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/cppalliance/json
#


import path ;
import project ;
import saxonhe ;


.here  = [ path.make [ modules.binding $(__name__) ] ] ;
.here = $(.here:D) ;


rule reference ( target : index overrides )
{
    local project = [ project.current ] ;

    # Copy all the XSLT modules to the target directory.
    #
    # FIXME: Change this so we can just specify a directory,
    #        rather than every file individually.
    #
    #        Also, somehow force dependencies in a general way
    #        such that the XSLT has to be executed again
    #        if any of the modules change. For example,
    #        if base-extract-xml-pages.xml changes, then
    #        an invocation of extract-xml-pages.xsl (which
    #        imports the former) must be run again.
    #
    local src-dir = $(.here)/include/docca ;
    make-explicit extract-xml-pages.xsl      $(project) : $(src-dir)/extract-xml-pages.xsl      : @common.copy ;
    make-explicit base-extract-xml-pages.xsl $(project) : $(src-dir)/base-extract-xml-pages.xsl : @common.copy ;
    make-explicit common.xsl                 $(project) : $(src-dir)/common.xsl                 : @common.copy ;
    make-explicit stage1.xsl                 $(project) : $(src-dir)/stage1.xsl                 : @common.copy ;
    make-explicit base-stage1.xsl            $(project) : $(src-dir)/base-stage1.xsl            : @common.copy ;
    make-explicit stage2.xsl                 $(project) : $(src-dir)/stage2.xsl                 : @common.copy ;
    make-explicit base-stage2.xsl            $(project) : $(src-dir)/base-stage2.xsl            : @common.copy ;
    make-explicit assemble-quickbook.xsl     $(project) : $(src-dir)/assemble-quickbook.xsl     : @common.copy ;
    make-explicit emphasized-types.xsl       $(project) : $(src-dir)/emphasized-types.xsl       : @common.copy ;
    make-explicit base-config.xsl            $(project) : $(src-dir)/base-config.xsl            : @common.copy ;

    # Copy the project-specific config XSLT
    make-explicit custom-overrides.xsl $(project) : $(overrides) : @common.copy ;

    #-------------------------------------------------------------------------------
    #
    # Run index.xml through the first transformation stage
    # (assembling and splitting the XML into page-specific files).
    #
    make-explicit xml-pages.xml $(project)
        : $(index)
          extract-xml-pages.xsl

          # Make bjam aware of additional dependencies
          base-extract-xml-pages.xsl
          base-config.xsl
          custom-overrides.xsl
          common.xsl
        : @saxonhe.saxonhe
        ;

    # This is just to make the directory eligible as a source
    make-explicit xml-pages $(project) : xml-pages.xml : @docca.null_action ;

    # TODO: figure out why this (and the following stage) get built every time
    make-explicit stage1/results $(project)
        : xml-pages
          stage1.xsl

          # additional dependencies
          base-stage1.xsl
          base-config.xsl
          custom-overrides.xsl
          common.xsl
        : @saxonhe.saxonhe_dir
        ;

    make-explicit stage2/results $(project)
        : stage1/results
          stage2.xsl

          # additional dependencies
          emphasized-types.xsl
          base-stage2.xsl
          base-config.xsl
          custom-overrides.xsl
          common.xsl
        : @saxonhe.saxonhe_dir
        ;

    make $(target)
        : xml-pages.xml
          assemble-quickbook.xsl

          # TODO: make this input to the XSLT somehow
          #       rather than relying on it being hard-coded
          #       in the XSLT (which it is!)
          stage2/results
        : @saxonhe.saxonhe
        ;
}


local rule make-explicit ( target project : sources * : make-rule + : reqs *
    : ureqs * )
{
    make $(target) : $(sources) : $(make-rule) : $(reqs) : $(ureqs) ;
    $(project).mark-target-as-explicit $(target) ;
}


actions null_action
{
    touch -c $(1) ;
}
